package com.vantiq.nlp

PROCEDURE NLCore.processMessage(evMessage Object, collab Object, spacelessName String, naturalLanguageSource String) HIDDEN

log.info("NLCore.processMessage(): Event: {} CollaborationType: {}, id: {}, name: {}",
        [evMessage, collab.collaborationType, collab.id, spacelessName])
var hasError = false

if (!evMessage) {
    log.error("NLCore.ProcessMessage(): No message provided")
}

var response
var responseCode = null

try {
  response = NLCore.respondToNLQuery(evMessage.text, collab, naturalLanguageSource)
} catch (error) {
	log.error("NLCore.processMessage(): Error Encountered: " + stringify(error))
    response = error.message
    responseCode = error.code
    hasError = true
}

if (hasError || response.errorMsg) {
    var errMsg
    if (hasError) {
        errMsg = format("processMessage(): Encountered exception: {0}: {1}", responseCode, response)
        log.error(errMsg)
    } else {
        errMsg = response.errorMsg
        log.debug("processMessage(): Encountered error: {}", response.errorMsg)
    }
    NLCore.publishResponse(evMessage, errMsg, null)
    response = {}
    response.response = null // Just to satisfy callers...
    response.errorMsg = errMsg
} else {
    log.info("NLCore.processMessage(): " + response)

    // Now, we have the intent structure.  Construct an event & publish it...

    var topicName = "/collaboration/naturalLanguageProcessor/" + collab.collaborationType + "/" + spacelessName

    log.debug("NLCore.processMessage(): Publishing intent {} to topic {}",
                        [response, topicName])

    // Add intent specification to the event & publish that.
    // Using that mechanism, we add to the information as this flows down the activity stream.

    evMessage.intentSpecification = response.response
    evMessage.collaborationId = collab.id

    publish evMessage to topic @topicName
}
return response



