buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
    }
}

plugins {
    id("io.freefair.lombok") // version "6.3.0" // version "8.7.1"
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
}

group 'io.vantiq'
version 'unspecified'

sourceCompatibility = 1.8

ext {
    jacksonVersion = '2.9.3'
    eclipseMiloVersion = '0.6.12'
    logbackVersion = '1.2.3'
    junitVersion = '4.12'
    commonsCliVersion = '1.4'
    bouncyCastleVersion = '1.58'
    slf4jApiVersion = '1.7.25'
}

repositories {
    mavenCentral()
}


dependencies {
    // compile files('../extjsdk/build/libs/extjsdk-all.jar')
    implementation project(":extjsdk")

    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "commons-cli:commons-cli:${commonsCliVersion}"

    implementation "org.eclipse.milo:sdk-client:${eclipseMiloVersion}"
    implementation "org.eclipse.milo:stack-client:${eclipseMiloVersion}"
    implementation "org.eclipse.milo:stack-core:${eclipseMiloVersion}"

    // To force the inclusion of the bouncy castle provider libraries into the application build,
    // we must re-declare these on Milo SDK-client's behalf. The dependency declared
    // in the stack is optional, so it won't be bundled
    // into the application plugin's opcuaSource.{tar,zip}

    runtimeOnly "org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}"
    runtimeOnly "org.bouncycastle:bcpkix-jdk15on:${bouncyCastleVersion}"

    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
    testImplementation "org.eclipse.milo:client-examples:${eclipseMiloVersion}"
}

mainClassName = 'io.vantiq.extsrc.opcua.opcUaSource.OpcUaServer'

startScripts{
    doLast{
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        // Add the log Config to the top of the classpath
        windowsScriptFile.text = windowsScriptFile.text.replace("CLASSPATH=", "CLASSPATH=%APP_HOME%\\logConfig;")
        unixScriptFile.text = unixScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/logConfig:')
    }
}

applicationDistribution.from("src/main/resources/LICENSES") {
    into "LICENSES"
}

applicationDistribution.from("src/main/resources/log4j2.xml") {
    into "logConfig"
}

test {
    useJUnit {
        excludeCategories 'io.vantiq.extsrc.opcua.categories.OnlyHandTests'
    }
}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
}

task runExampleServer(type: JavaExec) {
    main = "io.vantiq.extsrc.opcua.io.vantiq.extsrc.opcua.sampleServer.RunExampleServer"
    classpath = sourceSets.test.runtimeClasspath
}