// Create a FHIR OperationOutcome message from an error.
//
// In most cases, the FHIR server will send this back & we'll pick it up from the exception.
// However, if there is no underlying error reported (or not reported properly), create an OperationOutcome
// resource/message to return.

package com.vantiq.fhir

private PROCEDURE fhirService.createErrorMsg(exc Object REQUIRED, targetPath String REQUIRED): Object
var errDetails = exc.params[2]
var opOutcome = null
var resValue = null

log.debug("Error details: {}: {}", [typeOf(errDetails), errDetails])
if (errDetails && typeOf(errDetails) == "String") {
	// If we get an error back, check to see if the error include was JSON.  If so, parse
	// it & report the details.  If we get an error parsing it, then it's probably just a plain
	// string so we'll just pass it along.
	try {
		errDetails = parse(errDetails)
	} catch (badParse) {
		log.debug("Unable to parse exception params as JSON: {} -- {}",
			[badParse.message, errDetails])
	}
}
if (errDetails && typeOf(errDetails) == "Object") {
	resValue = errDetails
}
log.debug("resValue: {}", [resValue])
if (!resValue || resValue.resourceType != "OperationOutcome") {
	opOutcome = {
		resourceType : "OperationOutcome",
		issue : [
			{ severity: "error",
			  code: "exception",
			  details: "Source " + fhirSource.getValue() + " returned an unexpected error: " + exc.code + ".",
			  diagnostics: exc.message,
			  expression: targetPath
			}
		]
	}
	if (resValue) {
		opOutcome.issue[0].details = opOutcome.issue[0].details + " :: " + resValue
	}
} else {
	opOutcome = resValue
}
return opOutcome