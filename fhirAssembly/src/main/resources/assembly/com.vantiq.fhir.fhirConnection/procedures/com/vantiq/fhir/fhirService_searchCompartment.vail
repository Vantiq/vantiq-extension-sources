// Perform a search based on the compartment, id, & query provided

package com.vantiq.fhir

import service com.vantiq.fhir.fhirService

PROCEDURE fhirService.searchCompartment(compartment String REQUIRED DESCRIPTION "The FHIR Resource Compartment to search", 
                                        id String REQUIRED DESCRIPTION "The instance id desired",
                                        query Object REQUIRED DESCRIPTION "he FHIR query.  Object where the keys are the resource property names, and values are the values desired. If there are no restrictions, provide an empty object here (\"{}\").",
                                        type String DESCRIPTION "The FHIR resource type within the compartment to which to restrict the search.",
                                        modifiers com.vantiq.fhir.Modifiers DESCRIPTION "Query modifiers and headers for the call.",
                                        method String DESCRIPTION "HTTP Method to use, overriding search default: GET or POST"): com.vantiq.fhir.FHIRResponse WITH updateInterface=true

var theSource = fhirSource.getValue()
log.debug("Current value of fhirSource to use: {}", [theSource])
log.debug("searchCompartment({}, {}, {}, {}, {}, {})", [compartment, id, query, type, modifiers, method])
if (!theSource) {
    fhirService.setSource()
    theSource = fhirSource.getValue()
}
var targetPath = compartment + "/" + id
if (type) {
    targetPath = targetPath + "/" + type
}
if (!method) {
    method = ResourceConfig.get("defaultSearchHttpMethod")
    // Shouldn't happen, but ...
    if (!method) {
        method = "GET"
    }
} 
if (method == "GET" && !type) {
    // The spec requires that GET requests for a compartment/id (sans type) require the extra * to distinguish
    // the request from a "read" operation on a type with the same name as the compartment.
    targetPath = targetPath + "/*"
} else if (method == "POST") {
        targetPath = targetPath + "/_search"
}
log.debug("Performing compartment search using targetPath: {}, query: {}, modifiers: {}", [targetPath, query, modifiers])
return fhirService.performRestOpQuery(method, targetPath, query, modifiers)