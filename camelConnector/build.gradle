import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.namespace.QName
import groovy.xml.XmlParser

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
}

mainClassName = 'io.vantiq.extsrc.camelconn.connector.CamelMain'

startScripts{
    // Use shorter classpath here. We've injected the complete list into the main jar file's manifest.
    classpath = jar.outputs.files
    doLast{
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        // Add the log Config to the top of the classpath
        windowsScriptFile.text = windowsScriptFile.text.replace("CLASSPATH=", "CLASSPATH=%APP_HOME%\\logConfig;")
        unixScriptFile.text = unixScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/logConfig:')
    }
}

// Copies the logger setup into logConfig in the distribution
applicationDistribution.from("src/main/resources") {
    include "log4j2.xml"
    into "logConfig"
}

repositories {
    mavenCentral()
}

ext {
    apacheCommonsLangVersion = '3.12.0'
    apacheCommonsDbcp2Version = '2.10.0'
    dnsJavaVersion = '3.4.2'
    extjsdkVersion='1.0'
    gsonVersion = '2.9.1'
    ivyVersion = '2.5.1'
    jacksonVersion = '2.14.2'
    junitVersion = '4.13.2'
    junitVintageEngineVersion = '5.8.2'
    junitVersion = '4.13.2'
    log4JVersion='2.17.2'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.apache.camel:camel-core:${camelVersion}"
    implementation "org.apache.camel:camel-main:${camelVersion}"
    implementation "org.apache.camel:camel-support:${camelVersion}"
    implementation "org.apache.camel:camel-jackson:${camelVersion}"

    // FIXME: Temporary
    // The following are included to allow for resolution of beans involved in kamelets.  They will not always be
    // needed, and we would prefer to remove the need to fully resolve them.  But, for now, this gets things going.
    implementation "org.apache.camel.kamelets:camel-kamelets-utils:3.21.0" // ${camelVersion}"
    implementation "org.apache.commons:commons-dbcp2:${apacheCommonsDbcp2Version}"
    // TODO: May need mongodb component, too, though that's worse since it's a component & should be (only)
    //  dynamically discovered.

    implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
    implementation "org.apache.ivy:ivy:${ivyVersion}"
    implementation project(":extjsdk")
    implementation project(":camelComponent")    // The Vantiq Camel Component is automatically included
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:{jacksonVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    // Used for downloading route documents
    implementation "io.vantiq:vantiq-sdk:${vantiqSDKVersion}"

    // The following are the DSL libraries to include for support of the various route builders.
    // We need to include them in the base product (as oppose to using our constructed classloader)
    // since we need to parse the routes to determine what to extend via our constructed classloader.
    implementation "org.apache.camel:camel-xml-io-dsl:${camelVersion}"
    implementation "org.apache.camel:camel-yaml-dsl:${camelVersion}"
    // End of DSL-specific inclusions.

    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}"
    testImplementation "org.apache.camel:camel-test:${camelVersion}"
    testImplementation "io.vantiq:vantiq-sdk:${vantiqSDKVersion}"
    testImplementation project(path: ":extjsdk", configuration: 'testArtifacts')
    testImplementation "dnsjava:dnsjava:${dnsJavaVersion}"
    testImplementation("junit:junit:${junitVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}")
}

jar {
    doFirst {
        // Add all the jar files to the manifest here.  This allows us to avoid having to set a huge classpath,
        // which is known to fail on windows due to command line length limits. The failure depends upon the
        // installation location (since the "app path" is included), but by setting it here, we avoid that issue
        // completely.
        manifest {
            attributes (
                "Main-Class": "${mainClassName}",
                "Class-Path": configurations.runtimeClasspath.files.collect { it.name }.join(" ")
            )
        }
    }
}

group = 'io.vantiq.extsrc.camelconnector'
version = 'unspecified'
description = 'Vantiq Camel Connector'
java.sourceCompatibility = 1.11
java.targetCompatibility = JavaVersion.VERSION_11

/**
 * The following task builds an assembly project zip file to make the CAMEL source implementation type
 * known to the Vantiq system.  It also provides a schema type for the structured message & header for use
 * with the Vantiq component when the appropriate endpoint flag is specified.
 */

task zipAssembly(type: Zip) {
    def inFiles =  project.fileTree('src/main/resources/assembly/camelconnector')
    logger.debug('Infiles: {}', inFiles)

    project(':camelComponent').fileTree('src/main/resources/types').each { f ->
        it.inputs.file( f )
    }
    from(inFiles) {
        include '**/*'
    }
    from (project(':camelComponent').fileTree('src/main/resources')) {
        include 'types/**/*'
    }
    into "${project.name}"
    archiveName "${project.name}-assembly.zip"
}

jar.finalizedBy zipAssembly

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            pom {
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/**
 * This task generates a JSON file containing a map from the component scheme to the required component
 * This is used when we are discovering components.
 *
 * This task requires the gradle property 'camelRoot' is defined, and that it points to the root directory
 * of a git repo representing the version of camel against which we expect to run.  We use this to scan
 * the collected pom.xml & META-INF service definitions to build up the map mentioned above.
 *
 * We consider this up to date when the version in the existing file matches the version of camel against
 * which we are building/running.
 *
 * The file produced by this task is added to the project's jar file, so there is a dependency from the jar
 * task to this task.
 */

final String ARTIFACT_MAP_PATH = project.projectDir.absolutePath + '/src/main/resources'
final String ARTIFACT_MAP_FILE = ARTIFACT_MAP_PATH + '/artifactMap.json'
tasks.register('generateComponentList', ) {
    String[] camVersionParts = camelVersion.tokenize('.')
    it.outputs.file(ARTIFACT_MAP_FILE)
    it.outputs.upToDateWhen ({ param ->
        def f = file(ARTIFACT_MAP_FILE)
        logger.debug('Exists: {} :: {}', f.exists(), f.getPath())
        if (f.exists()) {
            Map artMap = new JsonSlurper().parse(f)
            def fileVersion = artMap.get('camelVersion')
            def fileVersionParts = fileVersion.tokenize('.')
            logger.error('UpToDate: {} vs. build version {}', fileVersion.substring(0,4), camelVersion.substring(0,4))
            return fileVersionParts[0] == camVersionParts[0] &&
                fileVersionParts[1] == camVersionParts[1]
        }
        logger.debug('Returning false')
        return false
    })
    doFirst {
        if (!rootProject.hasProperty('camelRoot')) {
            throw new GradleException('"camelRoot" property is required to generate the component list')
        }
    }
    doLast {
        def camRootSpec = rootProject.getProperty('camelRoot')
        logger.info('CamelRootSpec: {}', camRootSpec)
        def camelRoot = file(camRootSpec)
        logger.info('Camel root is {}', camelRoot.absolutePath)
        def components = file("${camelRoot.absolutePath}/components")
        logger.info('Components is: {}', components.absolutePath)
        def compDef = fileTree(dir: components,
            include: '**/src/**/META-INF/services/org/apache/camel/component/*').getFiles()
        logger.info("Found {} component definition files.", compDef.size())
        logger.debug("Component definition files: ")
        Map<String, String> compMap = [:]

        boolean foundErrors = false
        compDef.each { aComp ->
            def f = file(aComp)
            if (!f.path.contains("target/classes/META-INF")) {
                logger.debug("    --> {} at {}", f.name, f.parent)
                def pomLoc = file(aComp.parent + "../../../../../../../../../../pom.xml")
                logger.debug("    --> (pom.xml exists): {} :: {}", pomLoc.exists(), pomLoc.path)
                def parsed = new XmlParser().parse(pomLoc)
                def artifactId = parsed.artifactId
                // Getting a node named 'parent' (the simple way) conflicts with the getting the parent node
                // Things tend to work, but let's do things properly so that we can avoid complications in the future.
                def parentNodeName = new QName(parsed.name().namespaceURI, "parent")
                String componentVersion = parsed.getAt(parentNodeName).version.text()
                if (artifactId.text().endsWith('-parent')) {
                    logger.error(">>>> This is a parent <<<<")
                    foundErrors = true
                }
                String[] compVersionParts = componentVersion.tokenize('.')
                if (compVersionParts[0] != camVersionParts[0] ||
                    compVersionParts[1] != camVersionParts[1]) {
                    logger.error('Version mismatch -- component version {} vs our camelVersion: {}',
                        componentVersion, camelVersion)
                    foundErrors = true
                }
                logger.debug('Artifact {} produced by pom.xml file : {}', artifactId.text(), pomLoc.path)
                logger.debug('Scheme {} requires Artifact {}', aComp.name, artifactId.text())
                if (compMap[aComp.name] != null) {
                    if (compMap[aComp.name] != artifactId.text()) {
                        foundErrors = true
                        logger.error("Scheme {} has artifact name confusion/collision: {} vs {}", aComp.name,
                            compMap[aComp.name], artifactId.text())
                    }
                }
                compMap.put(aComp.name, artifactId.text())
            } else {
                logger.debug("            (skipping {} since it's a build artifact duplicate)", aComp.path)
            }
        }

        def dfDef = fileTree(dir: components,
            include: '**/src/**/META-INF/services/org/apache/camel/dataformat/*').getFiles()
        logger.info("Found {} dataformat definition files.", dfDef.size())
        logger.debug("DataFormat definition files: ")
        Map<String, String> dfMap = [:]

        dfDef.each { df ->
            def f = file(df)
            if (!f.path.contains("target/classes/META-INF")) {
                logger.debug("    --> {} at {}", f.name, f.parent)
                def pomLoc = file(df.parent + "../../../../../../../../../../pom.xml")
                logger.debug("    --> (pom.xml exists): {} :: {}", pomLoc.exists(), pomLoc.path)
                def parsed = new XmlParser().parse(pomLoc)
                def artifactId = parsed.artifactId
                // Getting a node named 'parent' (the simple way) conflicts with the getting the parent node
                // Things tend to work, but let's do things properly so that we can avoid complications in the future.
                def parentNodeName = new QName(parsed.name().namespaceURI, "parent")
                String componentVersion = parsed.getAt(parentNodeName).version.text()
                if (artifactId.text().endsWith('-parent')) {
                    logger.error(">>>> This is a parent <<<<")
                    foundErrors = true
                }
                String[] compVersionParts = componentVersion.tokenize('.')
                if (compVersionParts[0] != camVersionParts[0] ||
                    compVersionParts[1] != camVersionParts[1]) {
                    logger.error('Version mismatch -- component version {} vs our camelVersion: {}',
                        componentVersion, camelVersion)
                    foundErrors = true
                }
                logger.debug('Artifact {} produced by pom.xml file : {}', artifactId.text(), pomLoc.path)
                logger.debug('Scheme {} requires Artifact {}', df.name, artifactId.text())
                if (dfMap[df.name] != null) {
                    if (dfMap[df.name] != artifactId.text()) {
                        foundErrors = true
                        logger.error("Scheme {} has artifact name confusion/collision: {} vs {}", df.name,
                            dfMap[df.name], artifactId.text())
                    }
                }
                dfMap.put(df.name, artifactId.text())
            } else {
                logger.debug("            (skipping {} since it's a build artifact duplicate)", df.path)
            }
        }

        if (foundErrors) {
            throw new GradleException("Found errors gathering scheme to artifact mapping.")
        }
        def artifactDef = [ camelVersion: camelVersion,
                            components: compMap,
                            dataformats: dfMap]
        def jsonPretty = JsonOutput.prettyPrint(JsonOutput.toJson(artifactDef))
        def compFile = file(ARTIFACT_MAP_FILE)
        if (compFile.exists()) {
            compFile.delete()
        }
        compFile.createNewFile()
        compFile.write(jsonPretty)
    }
}

tasks.withType(Test) {
    if (rootProject.hasProperty("TestAuthToken")) {
        systemProperty "TestAuthToken", rootProject.findProperty("TestAuthToken") ?: "empty"
    }
    if (rootProject.hasProperty("TestVantiqServer")) {
        systemProperty "TestVantiqServer", rootProject.findProperty("TestVantiqServer") ?: "empty"
    }
    // Use the build dir as a base to get our various test artifacts.
    systemProperty "buildDir", "${buildDir}"

    if (rootProject.hasProperty("camel-salesforce-loginUrl")) {
        systemProperty "camel-salesforce-loginUrl", rootProject.findProperty("camel-salesforce-loginUrl") ?: "empty"
    }
    if (rootProject.hasProperty("camel-salesforce-clientId")) {
        systemProperty "camel-salesforce-clientId", rootProject.findProperty("camel-salesforce-clientId") ?: "empty"
    }
    if (rootProject.hasProperty("camel-salesforce-clientSecret")) {
        systemProperty "camel-salesforce-clientSecret",
            rootProject.findProperty("camel-salesforce-clientSecret") ?: "empty"
    }
    if (rootProject.hasProperty("camel-salesforce-refreshToken")) {
        systemProperty "camel-salesforce-refreshToken",
            rootProject.findProperty("camel-salesforce-refreshToken") ?: "empty"
    }
}

test {
    useJUnitPlatform()
}
