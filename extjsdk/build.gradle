buildscript {
    repositories {mavenCentral() }
}

plugins {
    id 'java'
}

group 'io.vantiq'
version 'unspecified'

ext {
    // Open the Git repository in the current directory and get commit id of HEAD.
//    git = org.ajoberstar.grgit.Grgit.open(file('.'))
//    revision = git.head().id

    vertxVersion = '3.5.1'
    jacksonVersion = '2.9.3'
    hazelcastVersion = '3.8.2'
    metricsVersion = '4.0.2'
    rxjavaVersion = '2.1.11'
    slf4jApiVersion = '1.7.25'
    okhttpVersion = '4.12.0'
}

// Copies the README and licenses into the jar
jar.from(".") {
    include "README.md"
    include "LICENSE/*"
    into ""
}

repositories {
    mavenCentral()
}

configurations {
    testArtifacts
}

test {
    useJUnit()
    if (System.getenv("CONNECTOR_AUTH_TOKEN") == null) {
        environment "CONNECTOR_AUTH_TOKEN", "xxxx===="
    }
}

tasks.withType(Test) {
    if (rootProject.hasProperty("TestAuthToken")) {
        systemProperty "TestAuthToken", rootProject.findProperty("TestAuthToken") ?: "empty"
    }
    if (rootProject.hasProperty("TestVantiqServer")) {
        systemProperty "TestVantiqServer", rootProject.findProperty("TestVantiqServer") ?: "empty"
    }

    if (rootProject.hasProperty("TestRepeatedConnects")) {
        systemProperty "TestRepeatedConnects", rootProject.findProperty("TestRepeatedConnects") ?: "empty"
    }
    // Use the build dir as a base to get our various test artifacts.
    systemProperty "buildDir", "${buildDir}"
}

task testJar (type: Jar) {
    baseName = "${project.name}-test"
    from sourceSets.test.output
}

artifacts {
    testArtifacts testJar
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    implementation "org.apache.commons:commons-lang3:3.12.0"

    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    testImplementation group: 'junit', name: 'junit', version: '4.12'

    // Used in tests
    testImplementation "io.vantiq:vantiq-sdk:${vantiqSDKVersion}"

    // Used to create EvictingQueue for failed messages queue
    implementation "com.google.guava:guava:${guavaVersion}"
}

// Create a jar with all dependencies included
task fatJar(type: Jar) {
    appendix = 'fat'
    from sourceSets.main.output
    duplicatesStrategy 'include'
    from(".") {
        include "README.md"
        include "LICENSE/*"
        into ""
    }
    from configurations.runtimeClasspath.
                findAll( { it.name.endsWith('jar') && !it.name.startsWith('groovy')}).
                collect( { zipTree(it) })
}

// This is not a connector so no connector image should be constructed or pushed.
buildImages.onlyIf { false }
buildConnectorImage.onlyIf { false }
pushImages.onlyIf { false }
pushConnectorImage.onlyIf { false }