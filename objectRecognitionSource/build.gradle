plugins {
    id 'java'
    id 'application'
    id 'io.franzbecker.gradle-lombok'
}

group 'io.vantiq'
version 'unspecified'

sourceCompatibility = 1.8

repositories {
    mavenCentral()

    maven {
        url "https://vantiqmaven.s3.amazonaws.com/"
        metadataSources {
            // The artifact() metadataSource allows the dependency resolver to use the existence of the file
            // we want to be sufficient.  Then we don't have to publish fake POM files for our coco models
            // or image/video files.  Since this repo is used primarily to store big test objects that
            // we don't want in our GIT repo, this allows our strategy to work.  This change came during
            // upgrade to Gradle 6.x from 5.x.
            mavenPom()
            artifact()
        }
    }
}

mainClassName = 'io.vantiq.extsrc.objectRecognition.ObjectRecognitionMain'

// Used to automatically ignore tests for implementations that have been removed.
// The tests should be called "Test<source file name>.java"
// And should be included in the list as "**/Test<source file name>.java"
def standardImplementationTestPatterns = new ArrayList<String>(
    [
        "**/TestCameraRetriever.java",
        "**/TestFileRetriever.java",
        "**/TestYoloProcessor.java",
        "**/TestNetworkStreamRetriever.java",
        "**/TestFtpRetriever.java"
    ]
)

// Add the logConfig folder to the classpath so that changes to logConfig/log4j2.xml will be used for logging
startScripts{
    doLast{
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        // Add the log Config to the top of the classpath
        windowsScriptFile.text = windowsScriptFile.text.replace("CLASSPATH=", "CLASSPATH=%APP_HOME%\\logConfig;")
        unixScriptFile.text = unixScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/logConfig:')
    }
}

// Don't javadoc the Yolo code
javadoc.exclude("edu/*")

// Copies the README and licenses into the distribution
applicationDistribution.from(".") {
    include "README.md"
    include "LICENSE/*"
    into ""
}

// Copies the logger setup into logConfig in the distribution
applicationDistribution.from("src/main/resources") {
    include "log4j2.xml"
    into "logConfig"
}

test {
    // set heap size for the test JVM(s)
    // Java CV seems to impart more memory requirements for getting the same test results
    // with gradle that we do with the IDE (even though the IDE is running tests via gradle).
    minHeapSize = "2048m"
    maxHeapSize = "2048m"
}

tasks.withType(Test) {
    if (rootProject.hasProperty("TestAuthToken")) {
        systemProperty "TestAuthToken", rootProject.findProperty("TestAuthToken") ?: "empty"
    }
    if (rootProject.hasProperty("TestVantiqServer")) {
        systemProperty "TestVantiqServer", rootProject.findProperty("TestVantiqServer") ?: "empty"
    }
    // Use the build dir as a base to get our various test artifacts.
    systemProperty "buildDir", "${buildDir}"
}

compileJava.doFirst {
    removeUnnecessaryTests()
}

// Make 'removeUnnecessaryTests' a callable function
// It makes the build not compile tests for any of the standard image retriever or neural net implementations that
// have been deleted 
ext.removeUnnecessaryTests = {

    standardImplementationTestPatterns.removeIf {
        testPattern -> 
            def testedFile = testPattern.substring(7) // Remove '**/Test' from the Pattern, leaving the tested file
            def testedFilePattern = '**/' + testedFile // Add '**/' to the tested file so it can be found in the source sets
            // Get all files that match "**/<source file>" which should just be the source file or nothing if the
            // source file has been removed
            def standardFile = sourceSets.main.java.matching(
                    { delegate.include(testedFilePattern) }
            )
            return !standardFile.getFiles().isEmpty() // Return true (and remove) if the file it tests still exists
    }
    // Now standardImplementationTestPatterns only contains tests for files that don't exist
    
    // Remove all tests for files that don't exist
    sourceSets.test.java.filter.exclude(standardImplementationTestPatterns)
}


configurations {
    oldYoloNames
    metaTest
}

ext {
    currentCocoVersion = '1.2'
    lombokVersion = '1.16.18'
    javaCvVersion = '1.5.6'
}

dependencies {
    implementation project(':extjsdk')

    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    implementation "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:2.9.3"
    
    // Used by YoloProcessor alone. These two dependencies and all files in the edu.* package may be removed if YoloProcessor
    // is removed
    implementation "org.tensorflow:tensorflow:1.11.0"
    implementation "org.apache.commons:commons-math3:3.6.1"
    
    // Used by FtpRetriever alone. Can be removed if FtpRetriever is removed
    implementation "commons-net:commons-net:3.6"
    implementation "com.jcraft:jsch:0.1.54"
    
    // The following dependencies are used to download neural net model information (and test artifacts) used in our
    // tests and by some customer applications.


    testRuntimeOnly "vantiq.testArtifacts:sampleVideo:1.0@mov"
    testRuntimeOnly "vantiq.testArtifacts:nothingVideo:1.0@mov"

    testRuntimeOnly "vantiq.models:coco:${currentCocoVersion}@meta"
    testRuntimeOnly "vantiq.models:coco:${currentCocoVersion}@names"
    testRuntimeOnly "vantiq.models:coco:${currentCocoVersion}@pb"

    oldYoloNames "vantiq.models:coco:1.0@pb"
    oldYoloNames "vantiq.models:coco:1.0@names"
    oldYoloNames "vantiq.models:yolo:1.0@pb"
    
    metaTest "vantiq.models:coco:1.1@meta"
    metaTest "vantiq.models:coco:1.1@pb"

    // The following imports the Java OpenCV API * jar files representing the various JNI libraries (by platform)
    implementation "org.bytedeco:javacv-platform:${javaCvVersion}"
    
    // Used for uploading documents (images) to VANTIQ with VANTIQ SDK
    implementation "io.vantiq:vantiq-sdk:${vantiqSDKVersion}"

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation project(path:":extjsdk", configuration:"testArtifacts")
}

task copyModels(type: Copy, dependsOn: [configurations.testRuntimeClasspath, configurations.metaTest]) {
    from configurations.testRuntimeClasspath.find { it.name == "coco-${currentCocoVersion}.pb" },
        configurations.testRuntimeClasspath.find { it.name == "coco-${currentCocoVersion}.names" },
        configurations.testRuntimeClasspath.find { it.name == "coco-${currentCocoVersion}.meta" },
        
        // Used for testing different height/width from .meta file
        configurations.metaTest.find { it.name == "coco-1.1.meta" },
        configurations.metaTest.find { it.name == "coco-1.1.pb" }

    into "$buildDir/models/"
}

task copyOldCocoModels(type: Copy, dependsOn: [configurations.testRuntimeClasspath, configurations.oldYoloNames]) {
    from configurations.oldYoloNames.find { it.name == 'coco-1.0.pb' },
        configurations.oldYoloNames.find { it.name == 'coco-1.0.names' }
        

    into "$buildDir/models/"
}


task copyOldYoloModels(type: Copy, dependsOn: [configurations.testRuntimeClasspath, configurations.oldYoloNames]) {
    from configurations.oldYoloNames.find { it.name == 'yolo-1.0.pb' },
        configurations.oldYoloNames.find { it.name == 'coco-1.0.names' }

    rename { filename ->
        if (filename.contains("-1.0")) {
            return filename - "-1.0" // Remove version number as it was not present in the older model
        } else {
            return null // no change
        }
    }

    into "$buildDir/models/"
}

task copyTestResources(type: Copy, dependsOn: [configurations.testRuntimeClasspath, configurations.oldYoloNames]) {
    from configurations.testRuntimeClasspath.find { it.name == 'sampleVideo-1.0.mov' },
         configurations.testRuntimeClasspath.find { it.name == 'nothingVideo-1.0.mov' },
        sourceSets.test.resources.asList()

    into "$buildDir/testResources/"
}

test.dependsOn copyModels, copyTestResources