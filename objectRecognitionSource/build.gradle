group 'io.vantiq'
version 'unspecified'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

mainClassName = 'io.vantiq.extsrc.objectRecognition.ObjectRecognitionMain'


startScripts{
    doLast{
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        // Add the log Config to the top of the classpath
        windowsScriptFile.text = windowsScriptFile.text.replace("CLASSPATH=", "CLASSPATH=%APP_HOME%\\logConfig;")
        unixScriptFile.text = unixScriptFile.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/logConfig:')
        
        // Add the native libraries to
        windowsScriptFile.text = windowsScriptFile.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-Djava.library.path=%OPENCV_LOC%')
        unixScriptFile.text = unixScriptFile.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-Djava.library.path=$OPENCV_LOC')
    }
}

javadoc.exclude("edu/*")

applicationDistribution.from(".") {
    include "README.md"
    include "LICENSE/*"
    into ""
}

applicationDistribution.from("src/main/resources") {
    include "log4j2.xml"
    into "logConfig"
}


task addTestFiles {
    // sampleVideo.mov
    def sampleVideoUrl = new URL("https://www.dropbox.com/s/h5yd00qr8sfgdlt/sampleVideo.mov?dl=1")
    def sampleVideoFile = file('src/test/resources/sampleVideo.mov')
    if (!sampleVideoFile.exists()) {
        sampleVideoUrl.withInputStream{ i -> sampleVideoFile.withOutputStream{ it << i }}
    }
            
    // yolo.pb
    def yoloGraphUrl = new URL("https://www.dropbox.com/s/lhnygcd6o6275jb/yolo.pb?dl=1")
    def yoloGraphFile = file('src/test/resources/models/yolo.pb')
    if (!yoloGraphFile.exists()) {
        yoloGraphUrl.withInputStream{ i -> yoloGraphFile.withOutputStream{ it << i }}
    }
    
}

tasks.withType(Test) {
    systemProperty "java.library.path", "${System.env.OPENCV_LOC}"
}

def opencvDependentSourceFiles = new ArrayList<String>(
    [
        "**/CameraRetriever.java",
        "**/FileRetriever.java"
    ]
)
def opencvDependentTestFiles = new ArrayList<String>(
    [
        "**/TestCameraRetriever.java",
        "**/TestFileRetriever.java"
    ]
)

assemble.doLast {
    def os = org.gradle.internal.os.OperatingSystem.current()
    
    def opencvDependentFiles = sourceSets.main.java.matching(
            { delegate.setIncludes(opencvDependentSourceFiles) }
    )

    // Only need to warn if there are files dependent on 
    if (!opencvDependentFiles.getFiles().isEmpty()) {
        if (os.isWindows()) {
            if (!file("${System.env.OPENCV_LOC}\\opencv_java342.dll").exists()) {
                logger.warn("Cannot find '${System.env.OPENCV_LOC}\\opencv_java342.dll' This must exist for FileReader " 
                 + "and CameraReader to function correctly")
            }
        } else if (os.isLinux()) {
            if (!file("${System.env.OPENCV_LOC}/libopencv_java342.so").exists()) {
                logger.warn("Cannot find '${System.env.OPENCV_LOC}/libopencv_java342.so' This must exist for FileReader " 
                    + "and CameraReader to function correctly")
            }
        } else if (os.isMacOsX()) {
            if (!file("${System.env.OPENCV_LOC}/libopencv_java342.dylib").exists()) {
                logger.warn("Cannot find '${System.env.OPENCV_LOC}/libopencv_java342.dylib'. This must exist for FileReader " 
                    + "and CameraReader to function correctly")
            }
        } else {
            logger.warn("Compiling unknown file system. Please ensure that the compiled OpenCV C++ library is inside " 
                + "'${System.env.OPENCV_LOC}' so that ")
        }
    }
}

processTestResources.dependsOn addTestFiles

dependencies {
    compile project(':extjsdk')
    
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.0"
    

    compile "com.fasterxml.jackson.core:jackson-databind:2.9.3"
    
    // Used by YoloProcessor alone. These two dependencies and all files in the edu.* package may be removed if YoloProcessor
    // is removed
    compile "org.tensorflow:tensorflow:1.9.0"
    compile "org.apache.commons:commons-math3:3.6.1"
    
    def opencvDependentFiles = sourceSets.main.java.matching(
            { delegate.setIncludes(opencvDependentSourceFiles) }
    )
    if (!opencvDependentFiles.getFiles().isEmpty()) {
        if (System.env.OPENCV_LOC == null) {
            def depFileNames = ""
            opencvDependentFiles.getFiles().forEach {file -> depFileNames += file.getName() + ", "}
            throw new Exception("Environment variable 'OPENCV_LOC' is not set. Either set it to a location containing " + 
            "opencv-342.jar and the compiled OpenCV library, or remove ${depFileNames}")
        }
        compile files("${System.env.OPENCV_LOC}/opencv-342.jar")
    } else { // Make sure tests aren't compiled for files that are dependent on OpenCV if it's not being included
        sourceSets.test.java.filter.setExcludes(opencvDependentTestFiles)
    }

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile project(path:":extjsdk", configuration:"testArtifacts")
}

